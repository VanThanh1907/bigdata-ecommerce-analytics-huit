version: '3.8'

services:
  # Spark Master
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./data:/data
      - ./src:/app
    networks:
      - bigdata-network

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    depends_on:
      - spark-master
    volumes:
      - ./data:/data
      - ./src:/app
    networks:
      - bigdata-network

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=ecommerce
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./data/sample:/docker-entrypoint-initdb.d
    networks:
      - bigdata-network

  # Redis
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bigdata-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - bigdata-network

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - bigdata-network

  # Flask API Backend
  api-backend:
    build:
      context: ./web_demo/backend
      dockerfile: Dockerfile
    container_name: api-backend
    environment:
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ecommerce?authSource=admin
      - REDIS_URL=redis://redis:6379/0
      - SPARK_MASTER=spark://spark-master:7077
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
      - spark-master
    volumes:
      - ./web_demo/backend:/app
      - ./data:/data
      - ./src:/src
    networks:
      - bigdata-network

  # React Frontend
  frontend:
    build:
      context: ./web_demo/frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    depends_on:
      - api-backend
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    volumes:
      - ./web_demo/frontend:/app
      - /app/node_modules
    networks:
      - bigdata-network

  # Jupyter Notebook
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
      - ./src:/home/jovyan/src
    networks:
      - bigdata-network

volumes:
  mongo_data:
  redis_data:

networks:
  bigdata-network:
    driver: bridge